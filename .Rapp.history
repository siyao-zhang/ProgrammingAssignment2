my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(3, 5, 7)
x[c(3, 5, 7)]
x[0]
x[30]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")
]
x<-c("a", )
x<-c("a", "b", "c", )
x<-c("a", "b", "c", "d")
seq_along(x)
?letter
letter
for(letter in x) {}
for(letter in x) {
print(letter)
}
?rbinom
swirl()
TRUE==TRUE
FALSE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!TRUE7
5 !TRUE 7
(5!=7)==!FALSE
(5==7)==!TRUE
info()
!(5!=7)
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <-sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean( c(2, 4, 5))
boring_function <- function(x) {#
  x#
}
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num =5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x<-c[1]}, c(8, 4, 6))
?first
??first
evaluate(function(x){x<-c[[1]]}, c(8, 4, 0))
evaluate(function(x){x<-x[[1]]}, c(8, 4, 0))
evaluate(function(x){x<-x[[3]]}, c(8, 4, 0))
evaluate(function(x){x<-x[[length(x)]]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram (Good morning)
telegram (Good, morning)
telegram ("Good", "morning")
submit()
mad_libs(place=school, adjective=many, noun=ruel)
mad_libs(school, many, ruel)
mad_libs("school", "many", "ruel")
submit()
"I" %p% "love" %P% "R!"
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass()
unclass(d1)
print(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
print(t4)
t4
class(t4)
Sys.time() >t1
Sys.time() -t1
difftime(Sys.time(), t1, units = 'days')
cube <- function(x, n) {#
        x^3#
}
cube(3)
x <- 1:10#
if(x > 5) {#
        x <- 0#
}
f <- function(x) {#
        g <- function(y) {#
                y + z#
        }#
        z <- 4#
        x + g(x)#
}
z <- 10#
f(3)
x <- 5#
y <- if(x < 3) {#
        NA#
} else {#
        10#
}
y
!is.null(1)
!is.null(NULL)
h <- function(x, y = NULL, d = 3L) {#
        z <- cbind(x, d)#
        if(!is.null(y))#
                z <- z + y#
        else#
                z <- z + f#
        g <- x + y / z#
        if(d == 3L)#
                return(g)#
        g <- g + 10#
        g#
}
h(1)
h(1, y=1)
h(1, y=1, d=3)
?quantile
runif(10)
?runif
?lapply
?colMeans
?lapply
?str
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flag, class)
?sapply
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags, unique)
print(unique_vals)
sapply(unique_vals, length)
lapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)#
data(iris)
?iris
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
?apply
apply(iris[, 1:4], 2, mean)
library(datasets)#
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug(ls)
ls
?ls
ls()
1
2
i
7
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
I2 <- matrix(c(1,0,0,1), nrow = 2, ncol = 2)
n1 <- matrix(c(6,2,8,4), nrow = 2, ncol = 2)
source(makeCacheMatrix)
source(cachematrix.R)
source(cachematrix)
?source
source()
source(cachematrix)
source(makeCacheMatrix)
makeCacheMatrix <- function(x = matrix()) {#
  m <- NULL#
  set <- function(y) {#
    x <<- y#
    m <<- NULL#
  }#
  get <- function() x#
  setsolve <- function(solve) m <<- solve#
  getsolve <- function() m#
  list(set = set, get = get,#
       setsolve = setsolve,#
       getsolve = getsolve)#
}
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve <- function(x, ...) {#
  m <- x$getsolve()#
  if(!is.null(m)) {#
    message("getting cached data")#
    return(m)#
  }#
  data <- x$get()#
  m <- solve(data, ...)#
  x$setsolve(m)#
  m#
}
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow = 2, ncol = 2)#
myMatrix_object$set(n2)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
